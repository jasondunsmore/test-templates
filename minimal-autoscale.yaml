heat_template_version: 2013-05-23

resources:

  lb:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      nodes: []
      protocol: TCP
      port: 80
      virtualIps:
        - {"type": "PUBLIC", "ipVersion": "IPV4"}

  # Begin AutoScale resources

  as_group_web_servers:
    type: Rackspace::AutoScale::Group
    properties:
      groupConfiguration:
        name: web-servers-as-group
        cooldown: 60
        minEntities: 2
        maxEntities: 10
        metadata:
          cool_factor: "50"
      launchConfiguration:
        type: launch_server
        args:
          server:
            name: minimal autoscale group
            key_name: jasond
            imageRef: af2606d8-14a8-4ba7-a2f7-04fa3660251d
            flavorRef: general1-1
            config_drive: true
            metadata:
              hotness_factor: "100"
            networks:
              - uuid: "00000000-0000-0000-0000-000000000000"
              - uuid: "11111111-1111-1111-1111-111111111111"
            user_data: |
              #!/bin/bash -v
              service iptables save
              service iptables stop
              chkconfig iptables off
              yum -y install httpd
              chkconfig httpd on
              service httpd start
          loadBalancers:
            - loadBalancerId: { get_resource: lb }
              port: 80

  as_group_web_servers_inc_policy_01:
    type: Rackspace::AutoScale::ScalingPolicy
    properties:
      group: { get_resource: as_group_web_servers }
      name: web_servers_increment_01
      change: 1
      cooldown: 59
      type: webhook

  as_group_web_servers_dec_policy_01:
    type: Rackspace::AutoScale::ScalingPolicy
    properties:
      group: {get_resource: as_group_web_servers }
      name: web_servers_decrement_01
      change: -1
      cooldown: 59
      type: webhook

  as_group_web_servers_inc_policy_01_inc_webhook_01:
    type: Rackspace::AutoScale::WebHook
    properties:
      policy: { get_resource: as_group_web_servers_inc_policy_01 }
      name: webservers_inc_webhook_01
      metadata:
        is_cool: "true"

  as_group_web_servers_dec_policy_01_dec_webhook_01:
    type: Rackspace::AutoScale::WebHook
    properties:
      policy: { get_resource: as_group_web_servers_dec_policy_01 }
      name: webservers_dec_webhook_01 
      metadata:
        is_cool: "false"

  # End AutoScale resources

  # Begin monitoring resources

  entity:
    type: Rackspace::CloudMonitoring::Entity
    properties:
      label: { get_param: "OS::stack_name" }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      ip_addresses:
        web_server: { get_attr: [ server, accessIPv4 ] }

  token:
    type: Rackspace::CloudMonitoring::AgentToken
    properties:
      label: { get_param: "OS::stack_name" }

  webcheck:
    type: Rackspace::CloudMonitoring::Check
    properties:
      entity: { get_resource: server }
      type: remote.http
      details:
        url:
          str_replace:
            template: http://server_ip/
            params:
              server_ip: { get_attr: [ server, accessIPv4 ] }
      label: webcheck
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      target_hostname: { get_attr: [ server, accessIPv4 ] }
      target_receiver: IPv4

  cpucheck:
    type: Rackspace::CloudMonitoring::Check
    properties:
      entity: { get_resource: server }
      type: agent.cpu
      label: cpu_check
      details: {}
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  email_notification:
    type: Rackspace::CloudMonitoring::Notification
    properties:
      label: email_heat_team
      type: email
      details:
        address: "admin@example.com"
  
  email_notification_2:
    type: Rackspace::CloudMonitoring::Notification
    properties:
      label: email_heat_team_2
      type: email
      details:
        address: "allclear@example.com"

  notify_heat_team:
    type: Rackspace::CloudMonitoring::NotificationPlan
    properties:
      label: { get_param: "OS::stack_name" }
      warning_state:
      - { get_resource: email_notification }
      critical_state:
      - { get_resource: email_notification }

  add_ok_notification:
    type: Rackspace::CloudMonitoring::PlanNotifications
    properties:
      plan: { get_resource: notify_heat_team }
      ok_state:
      - { get_resource: email_notification_2 }

  alert_randall:
    type: Rackspace::CloudMonitoring::Alarm
    properties:
      label: test_cpu_alarm
      check: { get_resource: cpucheck }
      plan: { get_resource: notify_heat_team }
      criteria: |
        :set consecutiveCount=5
        if (metric['usage_average'] > 95) {
            return new AlarmStatus(CRITICAL, 'CPU usage is #{usage_average}%');
        }
        if (metric['usage_average'] > 85) {
            return new AlarmStatus(WARNING, 'CPU usage is #{usage_average}%');
        }
        return new AlarmStatus(OK);
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }

  # End monitoring resources